<?xml version="1.0" encoding="utf-8" ?>
<Project>
    <Target Name="Restore">
        <Message Importance="high" Text="Restoring npm packages" />
        <Exec Command="npm install --no-audit --ignore-scripts --no-fund"
              WorkingDirectory="$(MSBuildProjectDirectory)" />
        <Exec Command="npm audit --omit=dev"
              WorkingDirectory="$(MSBuildProjectDirectory)" />
    </Target>

    <Target Name="UpdatePcfToolsSdk">
        <!-- Make sure $(NewVersion) is passed -->
        <Error Text="Required property 'NewVersion' property was not provieded."
               Condition=" '$(NewVersion)' == '' " />
        <Message Importance="high" Text="Setting Sdk in '$(MSBuildProjectFullPath)' to '$(CurrentNugetPackageName)/$(NewVersion)'" />

        <!-- Update the project SDK -->
        <PropertyGroup>
            <Namespace>
                <Namespace Prefix="dn" Uri="http://schemas.microsoft.com/developer/msbuild/2003" />
            </Namespace>
        </PropertyGroup>
        <XmlPoke XmlInputPath="$(MSBuildProjectFile)" Query="/dn:Project/@Sdk" Value="$(CurrentNugetPackageName)/$(NewVersion)" Namespaces="$(Namespace)" />
        <XmlPeek XmlInputPath="$(MSBuildProjectFile)" Query="/dn:Project/@Sdk" Namespaces="$(Namespace)">
            <Output TaskParameter="Result" PropertyName="FoundVersionName" />
        </XmlPeek>
        <Message Importance="high" Text="    ->  Sdk in '$(MSBuildProjectFullPath)' is now '$(FoundVersionName)'" />
        <Error Text="Unable to update Sdk in '$(MSBuildProjectFullPath)'."
               Condition=" '$(CurrentNugetPackageName)/$(NewVersion)' != '$(FoundVersionName)' " />
    </Target>

    <Target Name="UpdatePcfTemplateFiles">
        <ItemGroup>
            <TemplateFiles Include="$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\..\contentFiles'))\**\*" />
        </ItemGroup>
        <Copy SourceFiles="@(TemplateFiles)"
              DestinationFolder="$(MSBuildProjectDirectory)\%(RecursiveDir)"
              SkipUnchangedFiles="true" />
        <Message Importance="high" Text=" - Updated file: '$(MSBuildProjectDirectory)\$([MSBuild]::MakeRelative($(MSBuildThisFileDirectory)\..\contentFiles, %(TemplateFiles.Identity)))'" />
    </Target>

    <Target Name="SetVersion">
        <!-- Make sure $(NewVersion) is passed -->
        <Error Text="Required property 'NewVersion' property was not provieded."
               Condition=" '$(NewVersion)' == '' " />
        <Message Importance="high" Text="Setting control version to '$(NewVersion)' ..." />

        <ItemGroup>
            <ControlManifestInputFiles Include="$(MSBuildProjectDirectory)\**\ControlManifest.Input.xml" />
        </ItemGroup>

        <!-- <manifest> ... <control version="..."> -->
        <XmlPoke XmlInputPath="%(ControlManifestInputFiles.Identity)" Query="manifest/control/@version" Value="$(NewVersion)" />

        <!-- <manifest> ... <control> ... <resources> ... <resx version="..." /> -->
        <XmlPoke XmlInputPath="%(ControlManifestInputFiles.Identity)" Query="manifest/control/resources/resx/@version" Value="$(NewVersion)" />

        <!-- package.json: version -->
        <!-- package-lock.json: version -->
        <Exec Command="npm version $(NewVersion) --allow-same-version true --git-tag-version false"
              WorkingDirectory="$(MSBuildProjectDirectory)"/>
    </Target>
</Project>
