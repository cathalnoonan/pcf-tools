<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <!-- MSBuild target to set the solution name. -->
    <Target Name="SetSolutionZipName" BeforeTargets="PrepareForBuild">
        <!-- Get solution unique name -->
        <XmlPeek
            XmlInputPath="$(MSBuildProjectDirectory)\$(SolutionRootPath)\Other\Solution.xml"
            Query="/ImportExportXml/SolutionManifest/UniqueName/text()">
            <Output
                TaskParameter="Result"
                ItemName="temp_SolutionUniqueName" />
        </XmlPeek>

        <!-- Get solution version -->
        <XmlPeek
            XmlInputPath="$(MSBuildProjectDirectory)\$(SolutionRootPath)\Other\Solution.xml"
            Query="/ImportExportXml/SolutionManifest/Version/text()">
            <Output
                TaskParameter="Result"
                ItemName="temp_SolutionVersionNumber" />
        </XmlPeek>

        <!-- Use the above variables and tasks to generate solution output path. -->
        <PropertyGroup>
            <!-- Version Number: X_X_X_X (major_minor_build_revision) -->
            <temp_SolutionVersionNumber>@(temp_SolutionVersionNumber)</temp_SolutionVersionNumber>
            <temp_SolutionVersionNumber>$([System.Text.RegularExpressions.Regex]::Replace($(temp_SolutionVersionNumber),"\.","_"))</temp_SolutionVersionNumber>

            <!-- Managed suffix?: (not assigned for Unmanaged solution) -->
            <temp_SolutionManagedSuffix Condition=" '$(SolutionPackageType)' != 'Managed' "></temp_SolutionManagedSuffix>
            <temp_SolutionManagedSuffix Condition=" '$(SolutionPackageType)' == 'Managed' ">_managed</temp_SolutionManagedSuffix>

            <!--
                Combine the parts to make the solution name format
                - Unmanaged: {UniqueName}_{Version}.zip
                - Managed:   {UniqueName}_{Version}_managed.zip
            -->
            <temp_SolutionZipFileName>@(temp_SolutionUniqueName)_$(temp_SolutionVersionNumber)$(temp_SolutionManagedSuffix)</temp_SolutionZipFileName>

            <!-- Assign SolutionPackageZipFilePath: Consumed by the dotnet build -->
            <SolutionPackageZipFilePath>$(SolutionDistFolder)\$(temp_SolutionZipFileName).zip</SolutionPackageZipFilePath>
        </PropertyGroup>
    </Target>

    <Target Name="UpdatePcfPackagesVersion">
        <!-- Make sure $(NewVersion) is passed -->
        <Error
            Text="Required property 'NewVersion' property was not provieded."
            Condition=" '$(NewVersion)' == '' " />
        <Message
            Text="Setting Microsoft.PowerApps.MSBuild.Solution in '$(MSBuildProjectFullPath)' to '$(NewVersion)'"
            Importance="high" />

        <!-- Update the NuGet package -->
        <PropertyGroup>
            <Namespace>
                <Namespace Prefix="dn" Uri="http://schemas.microsoft.com/developer/msbuild/2003" />
            </Namespace>
        </PropertyGroup>
        <XmlPoke
            XmlInputPath="$(MSBuildProjectFile)"
            Query="/dn:Project/dn:ItemGroup/dn:PackageReference[@Include='Microsoft.PowerApps.MSBuild.Solution']/@Version"
            Value="$(NewVersion)"
            Namespaces="$(Namespace)" />
        <XmlPeek
            XmlInputPath="$(MSBuildProjectFile)"
            Query="/dn:Project/dn:ItemGroup/dn:PackageReference[@Include='Microsoft.PowerApps.MSBuild.Solution']/@Version"
            Namespaces="$(Namespace)">
            <Output
                TaskParameter="Result"
                PropertyName="FoundVersionName" />
        </XmlPeek>
        <Message
            Text="    ->  Microsoft.PowerApps.MSBuild.Solution version in '$(MSBuildProjectFullPath)' is now '$(FoundVersionName)'"
            Importance="high" />
        <Error
            Text="Unable to update Microsoft.PowerApps.MSBuild.Solution in '$(MSBuildProjectFullPath)'."
            Condition=" '$(NewVersion)' != '$(FoundVersionName)' " />
    </Target>

    <Target Name="UpdatePcfToolsSdk">
        <!-- Make sure $(NewVersion) is passed -->
        <Error
            Text="Required property 'NewVersion' property was not provieded."
            Condition=" '$(NewVersion)' == '' " />
        <Message
            Text="Setting Sdk in '$(MSBuildProjectFullPath)' to '$(NewVersion)'"
            Importance="high" />

        <!-- Update the project SDK -->
        <PropertyGroup>
            <Namespace>
                <Namespace Prefix="dn" Uri="http://schemas.microsoft.com/developer/msbuild/2003" />
            </Namespace>
        </PropertyGroup>
        <XmlPoke
            XmlInputPath="$(MSBuildProjectFile)"
            Query="/dn:Project/dn:Sdk[@Name='$(CurrentNugetPackageName)']/@Version"
            Value="$(NewVersion)"
            Namespaces="$(Namespace)" />
        <XmlPeek
            XmlInputPath="$(MSBuildProjectFile)"
            Query="/dn:Project/dn:Sdk[@Name='$(CurrentNugetPackageName)']/@Version"
            Namespaces="$(Namespace)">
            <Output
                TaskParameter="Result"
                PropertyName="FoundVersionName" />
        </XmlPeek>
        <Message
            Text="    ->  Sdk in '$(MSBuildProjectFullPath)' is now '$(FoundVersionName)'"
            Importance="high" />
        <Error
            Text="Unable to update Sdk in '$(MSBuildProjectFullPath)'."
            Condition=" '$(NewVersion)' != '$(FoundVersionName)' " />
    </Target>

    <Target Name="SetVersion">
        <!-- Make sure $(NewVersion) is passed -->
        <Error
            Text="Required property 'NewVersion' property was not provieded."
            Condition=" '$(NewVersion)' == '' " />
        <Message
            Text="Setting solution version to '$(NewVersion)' ..."
            Importance="high" />

        <ItemGroup>
            <SolutionXmlFiles Include="$(MSBuildProjectDirectory)\**\Solution.xml" />
        </ItemGroup>
        <PropertyGroup>
            <Namespace>
                <Namespace Prefix="" Uri="http://www.w3.org/2001/XMLSchema-instance" />
                <Namespace Prefix="xsi" Uri="http://www.w3.org/2001/XMLSchema-instance" />
            </Namespace>
        </PropertyGroup>

        <!-- <ImportExportXmlSolutionManifest> ... <SolutionManifest> ... <Version> -->
        <Message
            Text="Setting version number in '%(SolutionXmlFiles.Identity)' to '$(NewVersion)'"
            Importance="high" />
        <XmlPoke
            XmlInputPath="%(SolutionXmlFiles.Identity)"
            Query="ImportExportXml/SolutionManifest/Version"
            Value="$(NewVersion)"
            Namespaces="$(Namespace)" />
    </Target>

    <Target Name="IncludeGitHubRepositoryUrl">
        <ItemGroup>
            <SolutionXmlFiles Include="$(MSBuildProjectDirectory)\**\Solution.xml" />
        </ItemGroup>
        <PropertyGroup>
            <Namespace>
                <Namespace Prefix="" Uri="http://www.w3.org/2001/XMLSchema-instance" />
                <Namespace Prefix="xsi" Uri="http://www.w3.org/2001/XMLSchema-instance" />
            </Namespace>
        </PropertyGroup>

        <!-- Example:
            <ImportExportXml ...>
                <SolutionManifest>
                    <LocalizedNames>
                        <LocalizedName description="$(GitHubRepositoryUrl)" languagecode="1033" />
                    </LocalizedNames>
                </SolutionManifest>
            </ImportExportXml>
        -->
        <XmlPeek
            XmlInputPath="%(SolutionXmlFiles.Identity)"
            Query="/ImportExportXml/SolutionManifest/LocalizedNames/LocalizedName[@languagecode='1033']/@description"
            Namespaces="$(Namespace)">
            <Output
                TaskParameter="Result"
                PropertyName="SolutionDescription" />
        </XmlPeek>
        <PropertyGroup>
            <NewSolutionDescription Condition=" '$(SolutionDescription)' == '' ">$(GitHubRepositoryUrl)</NewSolutionDescription>
            <NewSolutionDescription Condition=" '$(SolutionDescription)' != '' ">$(SolutionDescription). $(GitHubRepositoryUrl)</NewSolutionDescription>
        </PropertyGroup>
        <Message
            Text="Setting to solution description in '%(SolutionXmlFiles.Identity)'..."
            Importance="high"
            Condition=" '$(SolutionDescription.Contains($(GitHubRepositoryUrl)))' == 'false' " />
        <XmlPoke
            XmlInputPath="%(SolutionXmlFiles.Identity)"
            Query="/ImportExportXml/SolutionManifest/LocalizedNames/LocalizedName[@languagecode='1033']/@description"
            Value="$(NewSolutionDescription)"
            Namespaces="$(Namespace)"
            Condition=" '$(SolutionDescription.Contains($(GitHubRepositoryUrl)))' == 'false' " />
    </Target>

</Project>
